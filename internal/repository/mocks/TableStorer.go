// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "project/internal/app/pkg/dto"

	mock "github.com/stretchr/testify/mock"

	repository "project/internal/repository"
)

// TableStorer is an autogenerated mock type for the TableStorer type
type TableStorer struct {
	mock.Mock
}

// InsertTableDetails provides a mock function with given fields: adminDetails
func (_m *TableStorer) InsertTableDetails(adminDetails dto.TableDetails) (repository.TableDetails, error) {
	ret := _m.Called(adminDetails)

	if len(ret) == 0 {
		panic("no return value specified for InsertTableDetails")
	}

	var r0 repository.TableDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.TableDetails) (repository.TableDetails, error)); ok {
		return rf(adminDetails)
	}
	if rf, ok := ret.Get(0).(func(dto.TableDetails) repository.TableDetails); ok {
		r0 = rf(adminDetails)
	} else {
		r0 = ret.Get(0).(repository.TableDetails)
	}

	if rf, ok := ret.Get(1).(func(dto.TableDetails) error); ok {
		r1 = rf(adminDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTableStorer creates a new instance of TableStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTableStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TableStorer {
	mock := &TableStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

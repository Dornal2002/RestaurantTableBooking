// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "project/internal/app/pkg/dto"

	mock "github.com/stretchr/testify/mock"
)

// AdminStorer is an autogenerated mock type for the AdminStorer type
type AdminStorer struct {
	mock.Mock
}

// AdminLogin provides a mock function with given fields: ctx, user
func (_m *AdminStorer) AdminLogin(ctx context.Context, user dto.AdminLoginRequest) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AdminLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AdminLoginRequest) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminSignup provides a mock function with given fields: ctx, user
func (_m *AdminStorer) AdminSignup(ctx context.Context, user dto.AdminSignUpRequest) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for AdminSignup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AdminSignUpRequest) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdmin provides a mock function with given fields: ctx
func (_m *AdminStorer) GetAdmin(ctx context.Context) ([]dto.AdminResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAdmin")
	}

	var r0 []dto.AdminResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.AdminResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.AdminResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AdminResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminStorer creates a new instance of AdminStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminStorer {
	mock := &AdminStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "project/internal/app/pkg/dto"

	mock "github.com/stretchr/testify/mock"

	repository "project/internal/repository"
)

// BookingStorer is an autogenerated mock type for the BookingStorer type
type BookingStorer struct {
	mock.Mock
}

// GetSlotDetails provides a mock function with given fields: ctx, bookDetails
func (_m *BookingStorer) GetSlotDetails(ctx context.Context, bookDetails dto.BookingDetails) ([]dto.SlotResponse, error) {
	ret := _m.Called(ctx, bookDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotDetails")
	}

	var r0 []dto.SlotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BookingDetails) ([]dto.SlotResponse, error)); ok {
		return rf(ctx, bookDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BookingDetails) []dto.SlotResponse); ok {
		r0 = rf(ctx, bookDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.SlotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BookingDetails) error); ok {
		r1 = rf(ctx, bookDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBookingDetails provides a mock function with given fields: bookDetails
func (_m *BookingStorer) InsertBookingDetails(bookDetails dto.BookingDetails) (repository.BookingTableDetails, error) {
	ret := _m.Called(bookDetails)

	if len(ret) == 0 {
		panic("no return value specified for InsertBookingDetails")
	}

	var r0 repository.BookingTableDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.BookingDetails) (repository.BookingTableDetails, error)); ok {
		return rf(bookDetails)
	}
	if rf, ok := ret.Get(0).(func(dto.BookingDetails) repository.BookingTableDetails); ok {
		r0 = rf(bookDetails)
	} else {
		r0 = ret.Get(0).(repository.BookingTableDetails)
	}

	if rf, ok := ret.Get(1).(func(dto.BookingDetails) error); ok {
		r1 = rf(bookDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookingStorer creates a new instance of BookingStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingStorer {
	mock := &BookingStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

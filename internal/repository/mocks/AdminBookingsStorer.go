// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "project/internal/app/pkg/dto"

	mock "github.com/stretchr/testify/mock"
)

// AdminBookingsStorer is an autogenerated mock type for the AdminBookingsStorer type
type AdminBookingsStorer struct {
	mock.Mock
}

// AdminAssignTable provides a mock function with given fields: admin
func (_m *AdminBookingsStorer) AdminAssignTable(admin dto.AdminAssignTable) (dto.AdminAssignTable, error) {
	ret := _m.Called(admin)

	if len(ret) == 0 {
		panic("no return value specified for AdminAssignTable")
	}

	var r0 dto.AdminAssignTable
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.AdminAssignTable) (dto.AdminAssignTable, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(dto.AdminAssignTable) dto.AdminAssignTable); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Get(0).(dto.AdminAssignTable)
	}

	if rf, ok := ret.Get(1).(func(dto.AdminAssignTable) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminCancelTable provides a mock function with given fields: admin
func (_m *AdminBookingsStorer) AdminCancelTable(admin dto.CancelTable) (dto.CancelTable, error) {
	ret := _m.Called(admin)

	if len(ret) == 0 {
		panic("no return value specified for AdminCancelTable")
	}

	var r0 dto.CancelTable
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CancelTable) (dto.CancelTable, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(dto.CancelTable) dto.CancelTable); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Get(0).(dto.CancelTable)
	}

	if rf, ok := ret.Get(1).(func(dto.CancelTable) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetDetails provides a mock function with given fields: ctx
func (_m *AdminBookingsStorer) AdminGetDetails(ctx context.Context) ([]dto.BookingDetails, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetDetails")
	}

	var r0 []dto.BookingDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.BookingDetails, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.BookingDetails); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BookingDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUpdateTable provides a mock function with given fields: admin, bookingId
func (_m *AdminBookingsStorer) AdminUpdateTable(admin dto.UpdateTable, bookingId int64) (dto.UpdateTable, error) {
	ret := _m.Called(admin, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for AdminUpdateTable")
	}

	var r0 dto.UpdateTable
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UpdateTable, int64) (dto.UpdateTable, error)); ok {
		return rf(admin, bookingId)
	}
	if rf, ok := ret.Get(0).(func(dto.UpdateTable, int64) dto.UpdateTable); ok {
		r0 = rf(admin, bookingId)
	} else {
		r0 = ret.Get(0).(dto.UpdateTable)
	}

	if rf, ok := ret.Get(1).(func(dto.UpdateTable, int64) error); ok {
		r1 = rf(admin, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminBookingsStorer creates a new instance of AdminBookingsStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminBookingsStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminBookingsStorer {
	mock := &AdminBookingsStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
